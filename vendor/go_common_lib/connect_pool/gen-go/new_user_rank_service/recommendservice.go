// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package new_user_rank_service

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type RecommendService interface {
	// Parameters:
	//  - Request
	RequestRecommendResults(request *RecommendRequest) (r *RecommendResponse, err error)
	// Parameters:
	//  - FfmModel
	UpdateModel(ffm_model *FFMModelConfig) (r bool, err error)
	// Parameters:
	//  - OnlineLiveUIDListFile
	UpdateOnlineLiveUidList(online_live_uid_list_file string) (r bool, err error)
}

type RecommendServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewRecommendServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *RecommendServiceClient {
	return &RecommendServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewRecommendServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *RecommendServiceClient {
	return &RecommendServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - Request
func (p *RecommendServiceClient) RequestRecommendResults(request *RecommendRequest) (r *RecommendResponse, err error) {
	if err = p.sendRequestRecommendResults(request); err != nil {
		return
	}
	return p.recvRequestRecommendResults()
}

func (p *RecommendServiceClient) sendRequestRecommendResults(request *RecommendRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("RequestRecommendResults", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RecommendServiceRequestRecommendResultsArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *RecommendServiceClient) recvRequestRecommendResults() (value *RecommendResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "RequestRecommendResults" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "RequestRecommendResults failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "RequestRecommendResults failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error1 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error2 error
		error2, err = error1.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error2
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "RequestRecommendResults failed: invalid message type")
		return
	}
	result := RecommendServiceRequestRecommendResultsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - FfmModel
func (p *RecommendServiceClient) UpdateModel(ffm_model *FFMModelConfig) (r bool, err error) {
	if err = p.sendUpdateModel(ffm_model); err != nil {
		return
	}
	return p.recvUpdateModel()
}

func (p *RecommendServiceClient) sendUpdateModel(ffm_model *FFMModelConfig) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("UpdateModel", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RecommendServiceUpdateModelArgs{
		FfmModel: ffm_model,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *RecommendServiceClient) recvUpdateModel() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "UpdateModel" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "UpdateModel failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "UpdateModel failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error3 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error4 error
		error4, err = error3.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error4
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "UpdateModel failed: invalid message type")
		return
	}
	result := RecommendServiceUpdateModelResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - OnlineLiveUIDListFile
func (p *RecommendServiceClient) UpdateOnlineLiveUidList(online_live_uid_list_file string) (r bool, err error) {
	if err = p.sendUpdateOnlineLiveUidList(online_live_uid_list_file); err != nil {
		return
	}
	return p.recvUpdateOnlineLiveUidList()
}

func (p *RecommendServiceClient) sendUpdateOnlineLiveUidList(online_live_uid_list_file string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("UpdateOnlineLiveUidList", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RecommendServiceUpdateOnlineLiveUidListArgs{
		OnlineLiveUIDListFile: online_live_uid_list_file,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *RecommendServiceClient) recvUpdateOnlineLiveUidList() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "UpdateOnlineLiveUidList" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "UpdateOnlineLiveUidList failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "UpdateOnlineLiveUidList failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error5 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error6 error
		error6, err = error5.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error6
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "UpdateOnlineLiveUidList failed: invalid message type")
		return
	}
	result := RecommendServiceUpdateOnlineLiveUidListResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type RecommendServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      RecommendService
}

func (p *RecommendServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *RecommendServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *RecommendServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewRecommendServiceProcessor(handler RecommendService) *RecommendServiceProcessor {

	self7 := &RecommendServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self7.processorMap["RequestRecommendResults"] = &recommendServiceProcessorRequestRecommendResults{handler: handler}
	self7.processorMap["UpdateModel"] = &recommendServiceProcessorUpdateModel{handler: handler}
	self7.processorMap["UpdateOnlineLiveUidList"] = &recommendServiceProcessorUpdateOnlineLiveUidList{handler: handler}
	return self7
}

func (p *RecommendServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x8 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x8.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x8

}

type recommendServiceProcessorRequestRecommendResults struct {
	handler RecommendService
}

func (p *recommendServiceProcessorRequestRecommendResults) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RecommendServiceRequestRecommendResultsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("RequestRecommendResults", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RecommendServiceRequestRecommendResultsResult{}
	var retval *RecommendResponse
	var err2 error
	if retval, err2 = p.handler.RequestRecommendResults(args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RequestRecommendResults: "+err2.Error())
		oprot.WriteMessageBegin("RequestRecommendResults", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("RequestRecommendResults", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type recommendServiceProcessorUpdateModel struct {
	handler RecommendService
}

func (p *recommendServiceProcessorUpdateModel) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RecommendServiceUpdateModelArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateModel", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RecommendServiceUpdateModelResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.UpdateModel(args.FfmModel); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateModel: "+err2.Error())
		oprot.WriteMessageBegin("UpdateModel", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateModel", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type recommendServiceProcessorUpdateOnlineLiveUidList struct {
	handler RecommendService
}

func (p *recommendServiceProcessorUpdateOnlineLiveUidList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RecommendServiceUpdateOnlineLiveUidListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateOnlineLiveUidList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RecommendServiceUpdateOnlineLiveUidListResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.UpdateOnlineLiveUidList(args.OnlineLiveUIDListFile); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateOnlineLiveUidList: "+err2.Error())
		oprot.WriteMessageBegin("UpdateOnlineLiveUidList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateOnlineLiveUidList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Request
type RecommendServiceRequestRecommendResultsArgs struct {
	Request *RecommendRequest `thrift:"request,1" json:"request"`
}

func NewRecommendServiceRequestRecommendResultsArgs() *RecommendServiceRequestRecommendResultsArgs {
	return &RecommendServiceRequestRecommendResultsArgs{}
}

var RecommendServiceRequestRecommendResultsArgs_Request_DEFAULT *RecommendRequest

func (p *RecommendServiceRequestRecommendResultsArgs) GetRequest() *RecommendRequest {
	if !p.IsSetRequest() {
		return RecommendServiceRequestRecommendResultsArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *RecommendServiceRequestRecommendResultsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *RecommendServiceRequestRecommendResultsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RecommendServiceRequestRecommendResultsArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &RecommendRequest{
		MaxItemNum: 300,
	}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *RecommendServiceRequestRecommendResultsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RequestRecommendResults_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RecommendServiceRequestRecommendResultsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *RecommendServiceRequestRecommendResultsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RecommendServiceRequestRecommendResultsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RecommendServiceRequestRecommendResultsResult struct {
	Success *RecommendResponse `thrift:"success,0" json:"success,omitempty"`
}

func NewRecommendServiceRequestRecommendResultsResult() *RecommendServiceRequestRecommendResultsResult {
	return &RecommendServiceRequestRecommendResultsResult{}
}

var RecommendServiceRequestRecommendResultsResult_Success_DEFAULT *RecommendResponse

func (p *RecommendServiceRequestRecommendResultsResult) GetSuccess() *RecommendResponse {
	if !p.IsSetSuccess() {
		return RecommendServiceRequestRecommendResultsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *RecommendServiceRequestRecommendResultsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RecommendServiceRequestRecommendResultsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RecommendServiceRequestRecommendResultsResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &RecommendResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *RecommendServiceRequestRecommendResultsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RequestRecommendResults_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RecommendServiceRequestRecommendResultsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *RecommendServiceRequestRecommendResultsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RecommendServiceRequestRecommendResultsResult(%+v)", *p)
}

// Attributes:
//  - FfmModel
type RecommendServiceUpdateModelArgs struct {
	FfmModel *FFMModelConfig `thrift:"ffm_model,1" json:"ffm_model"`
}

func NewRecommendServiceUpdateModelArgs() *RecommendServiceUpdateModelArgs {
	return &RecommendServiceUpdateModelArgs{}
}

var RecommendServiceUpdateModelArgs_FfmModel_DEFAULT *FFMModelConfig

func (p *RecommendServiceUpdateModelArgs) GetFfmModel() *FFMModelConfig {
	if !p.IsSetFfmModel() {
		return RecommendServiceUpdateModelArgs_FfmModel_DEFAULT
	}
	return p.FfmModel
}
func (p *RecommendServiceUpdateModelArgs) IsSetFfmModel() bool {
	return p.FfmModel != nil
}

func (p *RecommendServiceUpdateModelArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RecommendServiceUpdateModelArgs) readField1(iprot thrift.TProtocol) error {
	p.FfmModel = &FFMModelConfig{}
	if err := p.FfmModel.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FfmModel), err)
	}
	return nil
}

func (p *RecommendServiceUpdateModelArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateModel_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RecommendServiceUpdateModelArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ffm_model", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ffm_model: ", p), err)
	}
	if err := p.FfmModel.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FfmModel), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ffm_model: ", p), err)
	}
	return err
}

func (p *RecommendServiceUpdateModelArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RecommendServiceUpdateModelArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RecommendServiceUpdateModelResult struct {
	Success *bool `thrift:"success,0" json:"success,omitempty"`
}

func NewRecommendServiceUpdateModelResult() *RecommendServiceUpdateModelResult {
	return &RecommendServiceUpdateModelResult{}
}

var RecommendServiceUpdateModelResult_Success_DEFAULT bool

func (p *RecommendServiceUpdateModelResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return RecommendServiceUpdateModelResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *RecommendServiceUpdateModelResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RecommendServiceUpdateModelResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RecommendServiceUpdateModelResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *RecommendServiceUpdateModelResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateModel_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RecommendServiceUpdateModelResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *RecommendServiceUpdateModelResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RecommendServiceUpdateModelResult(%+v)", *p)
}

// Attributes:
//  - OnlineLiveUIDListFile
type RecommendServiceUpdateOnlineLiveUidListArgs struct {
	OnlineLiveUIDListFile string `thrift:"online_live_uid_list_file,1" json:"online_live_uid_list_file"`
}

func NewRecommendServiceUpdateOnlineLiveUidListArgs() *RecommendServiceUpdateOnlineLiveUidListArgs {
	return &RecommendServiceUpdateOnlineLiveUidListArgs{}
}

func (p *RecommendServiceUpdateOnlineLiveUidListArgs) GetOnlineLiveUIDListFile() string {
	return p.OnlineLiveUIDListFile
}
func (p *RecommendServiceUpdateOnlineLiveUidListArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RecommendServiceUpdateOnlineLiveUidListArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.OnlineLiveUIDListFile = v
	}
	return nil
}

func (p *RecommendServiceUpdateOnlineLiveUidListArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateOnlineLiveUidList_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RecommendServiceUpdateOnlineLiveUidListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("online_live_uid_list_file", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:online_live_uid_list_file: ", p), err)
	}
	if err := oprot.WriteString(string(p.OnlineLiveUIDListFile)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.online_live_uid_list_file (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:online_live_uid_list_file: ", p), err)
	}
	return err
}

func (p *RecommendServiceUpdateOnlineLiveUidListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RecommendServiceUpdateOnlineLiveUidListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RecommendServiceUpdateOnlineLiveUidListResult struct {
	Success *bool `thrift:"success,0" json:"success,omitempty"`
}

func NewRecommendServiceUpdateOnlineLiveUidListResult() *RecommendServiceUpdateOnlineLiveUidListResult {
	return &RecommendServiceUpdateOnlineLiveUidListResult{}
}

var RecommendServiceUpdateOnlineLiveUidListResult_Success_DEFAULT bool

func (p *RecommendServiceUpdateOnlineLiveUidListResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return RecommendServiceUpdateOnlineLiveUidListResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *RecommendServiceUpdateOnlineLiveUidListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RecommendServiceUpdateOnlineLiveUidListResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RecommendServiceUpdateOnlineLiveUidListResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *RecommendServiceUpdateOnlineLiveUidListResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateOnlineLiveUidList_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RecommendServiceUpdateOnlineLiveUidListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *RecommendServiceUpdateOnlineLiveUidListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RecommendServiceUpdateOnlineLiveUidListResult(%+v)", *p)
}
