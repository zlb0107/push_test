// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package new_user_rank_service

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

// Attributes:
//  - UID
//  - MaxItemNum
//  - LogID
type RecommendRequest struct {
	UID        string `thrift:"uid,1" json:"uid"`
	MaxItemNum int32  `thrift:"max_item_num,2" json:"max_item_num"`
	LogID      string `thrift:"log_id,3" json:"log_id"`
}

func NewRecommendRequest() *RecommendRequest {
	return &RecommendRequest{
		MaxItemNum: 300,
	}
}

func (p *RecommendRequest) GetUID() string {
	return p.UID
}

func (p *RecommendRequest) GetMaxItemNum() int32 {
	return p.MaxItemNum
}

func (p *RecommendRequest) GetLogID() string {
	return p.LogID
}
func (p *RecommendRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RecommendRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UID = v
	}
	return nil
}

func (p *RecommendRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MaxItemNum = v
	}
	return nil
}

func (p *RecommendRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.LogID = v
	}
	return nil
}

func (p *RecommendRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RecommendRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RecommendRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err)
	}
	if err := oprot.WriteString(string(p.UID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err)
	}
	return err
}

func (p *RecommendRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_item_num", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:max_item_num: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.MaxItemNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.max_item_num (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:max_item_num: ", p), err)
	}
	return err
}

func (p *RecommendRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("log_id", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:log_id: ", p), err)
	}
	if err := oprot.WriteString(string(p.LogID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.log_id (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:log_id: ", p), err)
	}
	return err
}

func (p *RecommendRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RecommendRequest(%+v)", *p)
}

// Attributes:
//  - Item
//  - Score
type ItemScorePair struct {
	Item  string  `thrift:"item,1" json:"item"`
	Score float64 `thrift:"score,2" json:"score"`
}

func NewItemScorePair() *ItemScorePair {
	return &ItemScorePair{}
}

func (p *ItemScorePair) GetItem() string {
	return p.Item
}

func (p *ItemScorePair) GetScore() float64 {
	return p.Score
}
func (p *ItemScorePair) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ItemScorePair) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Item = v
	}
	return nil
}

func (p *ItemScorePair) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Score = v
	}
	return nil
}

func (p *ItemScorePair) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ItemScorePair"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ItemScorePair) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("item", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:item: ", p), err)
	}
	if err := oprot.WriteString(string(p.Item)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.item (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:item: ", p), err)
	}
	return err
}

func (p *ItemScorePair) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("score", thrift.DOUBLE, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:score: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Score)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.score (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:score: ", p), err)
	}
	return err
}

func (p *ItemScorePair) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ItemScorePair(%+v)", *p)
}

// Attributes:
//  - RecommendResults
type RecommendResponse struct {
	RecommendResults []*ItemScorePair `thrift:"recommend_results,1" json:"recommend_results"`
}

func NewRecommendResponse() *RecommendResponse {
	return &RecommendResponse{}
}

func (p *RecommendResponse) GetRecommendResults() []*ItemScorePair {
	return p.RecommendResults
}
func (p *RecommendResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RecommendResponse) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ItemScorePair, 0, size)
	p.RecommendResults = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &ItemScorePair{}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.RecommendResults = append(p.RecommendResults, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *RecommendResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RecommendResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RecommendResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("recommend_results", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:recommend_results: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RecommendResults)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.RecommendResults {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:recommend_results: ", p), err)
	}
	return err
}

func (p *RecommendResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RecommendResponse(%+v)", *p)
}

// Attributes:
//  - FieldMapFile
//  - FeatureMapFile
//  - FfmModelFile
type FFMModelConfig struct {
	FieldMapFile   string `thrift:"field_map_file,1" json:"field_map_file"`
	FeatureMapFile string `thrift:"feature_map_file,2" json:"feature_map_file"`
	FfmModelFile   string `thrift:"ffm_model_file,3" json:"ffm_model_file"`
}

func NewFFMModelConfig() *FFMModelConfig {
	return &FFMModelConfig{}
}

func (p *FFMModelConfig) GetFieldMapFile() string {
	return p.FieldMapFile
}

func (p *FFMModelConfig) GetFeatureMapFile() string {
	return p.FeatureMapFile
}

func (p *FFMModelConfig) GetFfmModelFile() string {
	return p.FfmModelFile
}
func (p *FFMModelConfig) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FFMModelConfig) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.FieldMapFile = v
	}
	return nil
}

func (p *FFMModelConfig) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.FeatureMapFile = v
	}
	return nil
}

func (p *FFMModelConfig) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.FfmModelFile = v
	}
	return nil
}

func (p *FFMModelConfig) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FFMModelConfig"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FFMModelConfig) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("field_map_file", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:field_map_file: ", p), err)
	}
	if err := oprot.WriteString(string(p.FieldMapFile)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.field_map_file (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:field_map_file: ", p), err)
	}
	return err
}

func (p *FFMModelConfig) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("feature_map_file", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:feature_map_file: ", p), err)
	}
	if err := oprot.WriteString(string(p.FeatureMapFile)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.feature_map_file (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:feature_map_file: ", p), err)
	}
	return err
}

func (p *FFMModelConfig) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ffm_model_file", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ffm_model_file: ", p), err)
	}
	if err := oprot.WriteString(string(p.FfmModelFile)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ffm_model_file (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ffm_model_file: ", p), err)
	}
	return err
}

func (p *FFMModelConfig) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FFMModelConfig(%+v)", *p)
}
