// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package following

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type ErrorCode int64

const (
	ErrorCode_SUCCESS              ErrorCode = 0
	ErrorCode_ERROR_PARAMS         ErrorCode = 499
	ErrorCode_ERROR                ErrorCode = 500
	ErrorCode_THRIFT_ERROR         ErrorCode = 6101
	ErrorCode_MYSQL_ERROR          ErrorCode = 6102
	ErrorCode_REDIS_ERROR          ErrorCode = 6103
	ErrorCode_CACHE_MISS           ErrorCode = 6104
	ErrorCode_FOLLOW_LIMIT_ERROR   ErrorCode = 6105
	ErrorCode_ROW_NOT_FOUND        ErrorCode = 6106
	ErrorCode_ALREADY_FOLLOWED     ErrorCode = 6107
	ErrorCode_QUEUE_IS_EMPTY       ErrorCode = 6108
	ErrorCode_MYSQL_GET_CONN_ERROR ErrorCode = 6109
)

func (p ErrorCode) String() string {
	switch p {
	case ErrorCode_SUCCESS:
		return "SUCCESS"
	case ErrorCode_ERROR_PARAMS:
		return "ERROR_PARAMS"
	case ErrorCode_ERROR:
		return "ERROR"
	case ErrorCode_THRIFT_ERROR:
		return "THRIFT_ERROR"
	case ErrorCode_MYSQL_ERROR:
		return "MYSQL_ERROR"
	case ErrorCode_REDIS_ERROR:
		return "REDIS_ERROR"
	case ErrorCode_CACHE_MISS:
		return "CACHE_MISS"
	case ErrorCode_FOLLOW_LIMIT_ERROR:
		return "FOLLOW_LIMIT_ERROR"
	case ErrorCode_ROW_NOT_FOUND:
		return "ROW_NOT_FOUND"
	case ErrorCode_ALREADY_FOLLOWED:
		return "ALREADY_FOLLOWED"
	case ErrorCode_QUEUE_IS_EMPTY:
		return "QUEUE_IS_EMPTY"
	case ErrorCode_MYSQL_GET_CONN_ERROR:
		return "MYSQL_GET_CONN_ERROR"
	}
	return "<UNSET>"
}

func ErrorCodeFromString(s string) (ErrorCode, error) {
	switch s {
	case "SUCCESS":
		return ErrorCode_SUCCESS, nil
	case "ERROR_PARAMS":
		return ErrorCode_ERROR_PARAMS, nil
	case "ERROR":
		return ErrorCode_ERROR, nil
	case "THRIFT_ERROR":
		return ErrorCode_THRIFT_ERROR, nil
	case "MYSQL_ERROR":
		return ErrorCode_MYSQL_ERROR, nil
	case "REDIS_ERROR":
		return ErrorCode_REDIS_ERROR, nil
	case "CACHE_MISS":
		return ErrorCode_CACHE_MISS, nil
	case "FOLLOW_LIMIT_ERROR":
		return ErrorCode_FOLLOW_LIMIT_ERROR, nil
	case "ROW_NOT_FOUND":
		return ErrorCode_ROW_NOT_FOUND, nil
	case "ALREADY_FOLLOWED":
		return ErrorCode_ALREADY_FOLLOWED, nil
	case "QUEUE_IS_EMPTY":
		return ErrorCode_QUEUE_IS_EMPTY, nil
	case "MYSQL_GET_CONN_ERROR":
		return ErrorCode_MYSQL_GET_CONN_ERROR, nil
	}
	return ErrorCode(0), fmt.Errorf("not a valid ErrorCode string")
}

func ErrorCodePtr(v ErrorCode) *ErrorCode { return &v }

func (p ErrorCode) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ErrorCode) UnmarshalText(text []byte) error {
	q, err := ErrorCodeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type RelationType int64

const (
	RelationType_NO_RELATION RelationType = 0
	RelationType_BEFOLLOWED  RelationType = 1
	RelationType_FOLLOWING   RelationType = 2
	RelationType_MUTUAL      RelationType = 3
	RelationType_SELF        RelationType = 4
)

func (p RelationType) String() string {
	switch p {
	case RelationType_NO_RELATION:
		return "NO_RELATION"
	case RelationType_BEFOLLOWED:
		return "BEFOLLOWED"
	case RelationType_FOLLOWING:
		return "FOLLOWING"
	case RelationType_MUTUAL:
		return "MUTUAL"
	case RelationType_SELF:
		return "SELF"
	}
	return "<UNSET>"
}

func RelationTypeFromString(s string) (RelationType, error) {
	switch s {
	case "NO_RELATION":
		return RelationType_NO_RELATION, nil
	case "BEFOLLOWED":
		return RelationType_BEFOLLOWED, nil
	case "FOLLOWING":
		return RelationType_FOLLOWING, nil
	case "MUTUAL":
		return RelationType_MUTUAL, nil
	case "SELF":
		return RelationType_SELF, nil
	}
	return RelationType(0), fmt.Errorf("not a valid RelationType string")
}

func RelationTypePtr(v RelationType) *RelationType { return &v }

func (p RelationType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *RelationType) UnmarshalText(text []byte) error {
	q, err := RelationTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

// Attributes:
//  - ID
//  - UID
//  - TargetId
//  - Relation
type RelationInfo struct {
	ID       int64        `thrift:"id,1" json:"id"`
	UID      int64        `thrift:"uid,2" json:"uid"`
	TargetId int64        `thrift:"targetId,3" json:"targetId"`
	Relation RelationType `thrift:"relation,4" json:"relation"`
}

func NewRelationInfo() *RelationInfo {
	return &RelationInfo{
		Relation: 0,
	}
}

func (p *RelationInfo) GetID() int64 {
	return p.ID
}

func (p *RelationInfo) GetUID() int64 {
	return p.UID
}

func (p *RelationInfo) GetTargetId() int64 {
	return p.TargetId
}

func (p *RelationInfo) GetRelation() RelationType {
	return p.Relation
}
func (p *RelationInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RelationInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *RelationInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UID = v
	}
	return nil
}

func (p *RelationInfo) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TargetId = v
	}
	return nil
}

func (p *RelationInfo) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := RelationType(v)
		p.Relation = temp
	}
	return nil
}

func (p *RelationInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RelationInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RelationInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *RelationInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uid: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uid: ", p), err)
	}
	return err
}

func (p *RelationInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("targetId", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:targetId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TargetId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.targetId (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:targetId: ", p), err)
	}
	return err
}

func (p *RelationInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("relation", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:relation: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Relation)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.relation (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:relation: ", p), err)
	}
	return err
}

func (p *RelationInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RelationInfo(%+v)", *p)
}

// Attributes:
//  - RetCode
//  - RelationList
//  - Total
//  - RelationInfo
type RelationResult_ struct {
	RetCode      int32           `thrift:"retCode,1" json:"retCode"`
	RelationList []*RelationInfo `thrift:"relationList,2" json:"relationList,omitempty"`
	Total        int32           `thrift:"total,3" json:"total,omitempty"`
	RelationInfo *RelationInfo   `thrift:"relationInfo,4" json:"relationInfo,omitempty"`
}

func NewRelationResult_() *RelationResult_ {
	return &RelationResult_{}
}

func (p *RelationResult_) GetRetCode() int32 {
	return p.RetCode
}

var RelationResult__RelationList_DEFAULT []*RelationInfo

func (p *RelationResult_) GetRelationList() []*RelationInfo {
	return p.RelationList
}

var RelationResult__Total_DEFAULT int32 = 0

func (p *RelationResult_) GetTotal() int32 {
	return p.Total
}

var RelationResult__RelationInfo_DEFAULT *RelationInfo

func (p *RelationResult_) GetRelationInfo() *RelationInfo {
	if !p.IsSetRelationInfo() {
		return RelationResult__RelationInfo_DEFAULT
	}
	return p.RelationInfo
}
func (p *RelationResult_) IsSetRelationList() bool {
	return p.RelationList != nil
}

func (p *RelationResult_) IsSetTotal() bool {
	return p.Total != RelationResult__Total_DEFAULT
}

func (p *RelationResult_) IsSetRelationInfo() bool {
	return p.RelationInfo != nil
}

func (p *RelationResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RelationResult_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.RetCode = v
	}
	return nil
}

func (p *RelationResult_) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*RelationInfo, 0, size)
	p.RelationList = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &RelationInfo{
			Relation: 0,
		}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.RelationList = append(p.RelationList, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *RelationResult_) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Total = v
	}
	return nil
}

func (p *RelationResult_) readField4(iprot thrift.TProtocol) error {
	p.RelationInfo = &RelationInfo{
		Relation: 0,
	}
	if err := p.RelationInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RelationInfo), err)
	}
	return nil
}

func (p *RelationResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RelationResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RelationResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("retCode", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:retCode: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.RetCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.retCode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:retCode: ", p), err)
	}
	return err
}

func (p *RelationResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRelationList() {
		if err := oprot.WriteFieldBegin("relationList", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:relationList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RelationList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.RelationList {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:relationList: ", p), err)
		}
	}
	return err
}

func (p *RelationResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotal() {
		if err := oprot.WriteFieldBegin("total", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:total: ", p), err)
		}
		if err := oprot.WriteI32(int32(p.Total)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.total (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:total: ", p), err)
		}
	}
	return err
}

func (p *RelationResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetRelationInfo() {
		if err := oprot.WriteFieldBegin("relationInfo", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:relationInfo: ", p), err)
		}
		if err := p.RelationInfo.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RelationInfo), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:relationInfo: ", p), err)
		}
	}
	return err
}

func (p *RelationResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RelationResult_(%+v)", *p)
}

// Attributes:
//  - RetCode
//  - Count
//  - CounterMap
type CounterResult_ struct {
	RetCode    int32           `thrift:"retCode,1" json:"retCode"`
	Count      int32           `thrift:"count,2" json:"count,omitempty"`
	CounterMap map[int64]int32 `thrift:"counterMap,3" json:"counterMap,omitempty"`
}

func NewCounterResult_() *CounterResult_ {
	return &CounterResult_{}
}

func (p *CounterResult_) GetRetCode() int32 {
	return p.RetCode
}

var CounterResult__Count_DEFAULT int32 = 0

func (p *CounterResult_) GetCount() int32 {
	return p.Count
}

var CounterResult__CounterMap_DEFAULT map[int64]int32

func (p *CounterResult_) GetCounterMap() map[int64]int32 {
	return p.CounterMap
}
func (p *CounterResult_) IsSetCount() bool {
	return p.Count != CounterResult__Count_DEFAULT
}

func (p *CounterResult_) IsSetCounterMap() bool {
	return p.CounterMap != nil
}

func (p *CounterResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CounterResult_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.RetCode = v
	}
	return nil
}

func (p *CounterResult_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Count = v
	}
	return nil
}

func (p *CounterResult_) readField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[int64]int32, size)
	p.CounterMap = tMap
	for i := 0; i < size; i++ {
		var _key1 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key1 = v
		}
		var _val2 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val2 = v
		}
		p.CounterMap[_key1] = _val2
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *CounterResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CounterResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CounterResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("retCode", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:retCode: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.RetCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.retCode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:retCode: ", p), err)
	}
	return err
}

func (p *CounterResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCount() {
		if err := oprot.WriteFieldBegin("count", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:count: ", p), err)
		}
		if err := oprot.WriteI32(int32(p.Count)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.count (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:count: ", p), err)
		}
	}
	return err
}

func (p *CounterResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetCounterMap() {
		if err := oprot.WriteFieldBegin("counterMap", thrift.MAP, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:counterMap: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.I64, thrift.I32, len(p.CounterMap)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.CounterMap {
			if err := oprot.WriteI64(int64(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:counterMap: ", p), err)
		}
	}
	return err
}

func (p *CounterResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CounterResult_(%+v)", *p)
}

// Attributes:
//  - RetCode
//  - Uids
type FollowingResult_ struct {
	RetCode int32   `thrift:"retCode,1" json:"retCode"`
	Uids    []int64 `thrift:"uids,2" json:"uids,omitempty"`
}

func NewFollowingResult_() *FollowingResult_ {
	return &FollowingResult_{}
}

func (p *FollowingResult_) GetRetCode() int32 {
	return p.RetCode
}

var FollowingResult__Uids_DEFAULT []int64

func (p *FollowingResult_) GetUids() []int64 {
	return p.Uids
}
func (p *FollowingResult_) IsSetUids() bool {
	return p.Uids != nil
}

func (p *FollowingResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FollowingResult_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.RetCode = v
	}
	return nil
}

func (p *FollowingResult_) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.Uids = tSlice
	for i := 0; i < size; i++ {
		var _elem3 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem3 = v
		}
		p.Uids = append(p.Uids, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *FollowingResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FollowingResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FollowingResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("retCode", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:retCode: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.RetCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.retCode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:retCode: ", p), err)
	}
	return err
}

func (p *FollowingResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUids() {
		if err := oprot.WriteFieldBegin("uids", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uids: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.Uids)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Uids {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uids: ", p), err)
		}
	}
	return err
}

func (p *FollowingResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowingResult_(%+v)", *p)
}
